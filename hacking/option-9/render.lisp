(in-package :option-9)
(ql:quickload :cl-opengl)
#+option-9-debug (declaim (optimize (safety 3) (space 0) (speed 0) (debug 3)))

(defmethod render (ent jutter-interpolant) nil)
(defparameter *hackmax* (* 60 4))
(defparameter *hack* (make-hash-table :test 'equal))
(defparameter *hackiter* 0)
(defstruct hackit
  (replayingp NIL)
  (write-index 0)
  (read-index 0)
  (transforms (make-array *hackmax* :initial-element NIL)))

(defmethod render ((ent drawable) jutter-interpolant)
  (declare (ignorable jutter-interpolant))
  (let ((geometry (geometry ent))
	(model-interpolated
	 (interpolate-transform-matricies (previous-world-basis ent)
					  (world-basis ent)
					  jutter-interpolant)))
    (when NIL
      (multiple-value-bind (hit presentp)
	  (gethash ent *hack*)
	(unless presentp
	  (let ((nhit (make-hackit)))
	    (setf (gethash ent *hack*) nhit)
	    (setf hit nhit)))
	(cond
	  ((hackit-replayingp hit)
	   (setf model-interpolated
		 (aref (hackit-transforms hit) (hackit-read-index hit)))
	   (incf (hackit-read-index hit))
	   (when (= (hackit-read-index hit) *hackmax*)
	     (setf (hackit-read-index hit) 0)))
	  (t
	   (setf (aref (hackit-transforms hit) (hackit-write-index hit))
		 model-interpolated)
	   (incf (hackit-write-index hit))
	   (when (= (hackit-write-index hit) *hackmax*)
	     (setf (hackit-replayingp hit) T))))))
    (when geometry
      (gl:matrix-mode :modelview)
      (gl:push-matrix)
      (gl:mult-matrix (matrix-covert-to-opengl model-interpolated))
      (dolist (primitive (primitives gemotery))
	(gl:with-primitive (car primitive)
	  (dolist (vertex/color (cdr primitive))
	    (destructuring-bind ((vx vy vz) (cx cy cz))
		vertex/color
	      (gl:color cx cy cz)
	      (gl:vertex vx vy vz)))))
      (gl:pop-matrix)
      (when (hudp ent)
	(when (/= (hit-points ent) (max-hit-points ent))
	  (gl:push-matrix)
	  (gl:mult-matrix
	   (matrix-covert-to-opengl
	    (mtr (matrix-translate-get model-interpolated))))
	  (with-pvec-accessors (o (pvec 0d0 0d0 0d0))
	    (gl:line-width 4.0)
	    (gl:with-primitive :lines
	      (let* ((per (/ (hit-points ent) (max-hit-points ent)))
		     (invper (- 1.0 per)))
		(gl:color 1 1 1)
		(gl:vertex (+ ox -4)
			   (+ oy 5)
			   0d0)
		(gl:vertex (+ ox (- 4 (* 8 invper)))
			   (+ oy 5)
			   0d0)
		(gl:color .2 .2 .2)
		(gl:vertex (+ ox (- 4 (* 8 invper)))
			   (+ oy 5)
			   0d0)
		(gl:vertex (+ ox 4)
			   (+ oy 5)
			   0d0)))
	    (gl:line-width 1.0))
	  (gl:pop-matrix))))))
